For fuller, more recent documentation on Cockerel go to:
  http://packages.python.org/cockerel


1. Introduction
----------------------------------------

 Cockerel is a web based interactive logic lesson planner. It allows
 instructors to create logic lesson plans using wiki markup and then
 assign these to students.

Cockerel runs two processes: 'cockerel' is the the webserver, and 'coqd' is
the daemon connecting 'cockerel' to the theorem prover Coq.

This code base will be extremely unstable over the summer of 2010. If you
plan on using it send me (Dan Colish) a message.


2. Using Cockerel -- Instructions for Installing
----------------------------------------

If you would like to run this software you must have Coq >= 8.2pl1
installed. Please see the Coq site for installation details; http://coq.inria.fr
 
You must also have Python >= 2.6.5 installed on your system. Please see the
project documentation for installation details; http://www.python.org/download

Once you have satisified these dependencies, you can continue with
installation. I strongly recommend using the virtualenv project for managing the
python namespace. Assuming you have a project python install with setuptools,
you can create a new virtualenv around the project directory to install
into. This can be done with:

        virtualenv some_env_path
        . some_env_path/bin/activate
        pip install Cockerel

where 'Cockerel' is the directory where the repository resides.

To start Cockerel run
    python manager.py initdb
    python manager.py runserver
     
To start Coqd run
    python manager.py runcoqd

The Cockerel webpage will, by default, be at
  http://localhost:5000


3. Developing Cockerel -- Instructions for Installing
--------------------------------------

For developing with Cockerel you should checkout the latest tree from github:

    git clone git://github.com/dcolish/Cockerel.git

Then

    virtualenv some_env_path
    . some_env_path/bin/activate
    python setup.py develop


As part of the the last command, easy_install/pip downloads all dependencies for
the project.  As of 2010 Aug 16, you may have to must repeat:

    python setup.py develop

if the first call failed to install flask.
